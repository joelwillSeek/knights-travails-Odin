{"mappings":"IESM,EAEA,EAoBA,EC3BN,IDIoB,EAAM,ECJ1B,EAJW,AAAC,GACH,CAAA,CAAE,KAAA,CAAK,CAAA,EF+ChB,QAAQ,GAAA,CAAI,CCvCN,EAAS,EAAE,CAEX,EAAQ,EAAE,CAoBV,EAAW,AAAC,GAAU,EAAM,IAAA,CAAK,AAAA,EAAK,IAQ1C,AA1BmB,CAAA,KACjB,GAAI,EAAY,MAAA,EAAU,EAG1B,IAAK,IAAI,EAAI,EAAG,GAAK,EAAM,IAAK,CAC9B,EAAS,CAAW,CAAC,EAAI,EAAE,EAC3B,IAAI,EAAQ,EAAE,CAEd,IAAK,IAAI,EAAI,EAAG,GAAK,EAAM,IAAK,EAAM,IAAA,CAAK,GAE3C,EAAO,IAAA,CAAK,EACd,CACF,CAAA,IAgBO,CAAE,SAAA,EAAU,SAZJ,CAAC,EAAK,IAAU,CAAM,CAAC,EAAI,CAAC,EAAK,CAAG,EAYtB,WAdZ,CAAC,EAAK,IAAU,AAAqB,GAArB,CAAM,CAAC,EAAI,CAAC,EAAK,CAcT,gBARnB,KACpB,IAAI,EAAS,IAEb,EAAM,OAAA,CAAQ,IAAO,GAAU,AAAA,EAAK,IAApC,CACF,CAIyD,GDOrC,eAAtB,G,+D","sources":["<anon>","src/index.js","src/graph.js","src/node.js"],"sourcesContent":["let $a7e7a49547ab354d$var$node = (data)=>{\n    return {\n        data: data\n    };\n};\nvar $a7e7a49547ab354d$export$2e2bcd8739ae039 = $a7e7a49547ab354d$var$node;\n\n\n//graph implemented in matrix form\n/**\n *\n * @param {Number} size\n * @param {Array} nodes_array\n */ let $879a74e0f856fe0e$var$graph_matrix = (size, nodes_array)=>{\n    let matrix = [];\n    let nodes = [];\n    let create_graph = ()=>{\n        if (nodes_array.length != size) return \"size and length of nodes is not the same\";\n        for(let i = 1; i <= size; i++){\n            add_node(nodes_array[i - 1]);\n            let array = [];\n            for(let j = 1; j <= size; j++)array.push(0);\n            matrix.push(array);\n        }\n    };\n    let check_edge = (src, dist)=>matrix[src][dist] == 1 ? true : false;\n    let set_edge = (src, dist)=>matrix[src][dist] = 1;\n    let add_node = (value)=>nodes.push((0, $a7e7a49547ab354d$export$2e2bcd8739ae039)(value));\n    let get_string_form = ()=>{\n        let string = \" \";\n        nodes.forEach(()=>string += (0, $a7e7a49547ab354d$export$2e2bcd8739ae039).data);\n    };\n    create_graph();\n    return {\n        add_node: add_node,\n        set_edge: set_edge,\n        check_edge: check_edge,\n        get_string_form: get_string_form\n    };\n};\nvar $879a74e0f856fe0e$export$2e2bcd8739ae039 = $879a74e0f856fe0e$var$graph_matrix;\n\n\n// let new_graph = graph_matrix();\n// createKnightGraph();\n// console.log(new_graph.BFS(36, 26));\nlet $35da740d59af89ba$var$new_graph = (0, $879a74e0f856fe0e$export$2e2bcd8739ae039)();\nlet $35da740d59af89ba$var$createKnightGraph = ()=>{\n    let board = [];\n    for(let i = 1; i <= 64; i++)board.push(i);\n    $35da740d59af89ba$var$new_graph.set_node(board);\n    // Define possible knight movements\n    const movements = [\n        [\n            -2,\n            1\n        ],\n        [\n            -2,\n            -1\n        ],\n        [\n            2,\n            1\n        ],\n        [\n            2,\n            -1\n        ],\n        [\n            -1,\n            2\n        ],\n        [\n            -1,\n            -2\n        ],\n        [\n            1,\n            2\n        ],\n        [\n            1,\n            -2\n        ]\n    ];\n    // Create edges for each node using knight movements\n    for(let node = 1; node <= 64; node++){\n        const row = Math.floor((node - 1) / 8); // Calculate row index\n        const col = (node - 1) % 8; // Calculate column index\n        for (const [dx, dy] of movements){\n            const newRow = row + dx;\n            const newCol = col + dy;\n            if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n                const dest = newRow * 8 + newCol + 1;\n                $35da740d59af89ba$var$new_graph.set_edge(node, dest);\n            }\n        }\n    }\n};\nconsole.log($35da740d59af89ba$var$new_graph.get_string_form());\n\n\n//# sourceMappingURL=template.0bb223de.js.map\n","import graph_matrix from \"./graph\";\n\n// let new_graph = graph_matrix();\n\n// createKnightGraph();\n\n// console.log(new_graph.BFS(36, 26));\n\nlet new_graph = graph_matrix();\n\nlet createKnightGraph = () => {\n  let board = [];\n\n  for (let i = 1; i <= 64; i++) {\n    board.push(i);\n  }\n\n  new_graph.set_node(board);\n\n  // Define possible knight movements\n  const movements = [\n    [-2, 1],\n    [-2, -1],\n    [2, 1],\n    [2, -1],\n    [-1, 2],\n    [-1, -2],\n    [1, 2],\n    [1, -2],\n  ];\n\n  // Create edges for each node using knight movements\n  for (let node = 1; node <= 64; node++) {\n    const row = Math.floor((node - 1) / 8); // Calculate row index\n    const col = (node - 1) % 8; // Calculate column index\n\n    for (const [dx, dy] of movements) {\n      const newRow = row + dx;\n      const newCol = col + dy;\n\n      if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n        const dest = newRow * 8 + newCol + 1;\n        new_graph.set_edge(node, dest);\n      }\n    }\n  }\n};\n\nconsole.log(new_graph.get_string_form());\n","import node from \"./node\";\n\n//graph implemented in matrix form\n/**\n *\n * @param {Number} size\n * @param {Array} nodes_array\n */\nlet graph_matrix = (size, nodes_array) => {\n  let matrix = [];\n\n  let nodes = [];\n\n  let create_graph = () => {\n    if (nodes_array.length != size)\n      return \"size and length of nodes is not the same\";\n\n    for (let i = 1; i <= size; i++) {\n      add_node(nodes_array[i - 1]);\n      let array = [];\n\n      for (let j = 1; j <= size; j++) array.push(0);\n\n      matrix.push(array);\n    }\n  };\n\n  let check_edge = (src, dist) => (matrix[src][dist] == 1 ? true : false);\n\n  let set_edge = (src, dist) => (matrix[src][dist] = 1);\n\n  let add_node = (value) => nodes.push(node(value));\n\n  let get_string_form = () => {\n    let string = \" \";\n\n    nodes.forEach(() => (string += node.data));\n  };\n\n  create_graph();\n\n  return { add_node, set_edge, check_edge, get_string_form };\n};\n\nexport default graph_matrix;\n","let node = (data) => {\n  return { data };\n};\n\nexport default node;\n"],"names":["matrix","nodes","add_node","size","nodes_array","$a7e7a49547ab354d$export$2e2bcd8739ae039","data","console","log","$35da740d59af89ba$var$new_graph","value","push","create_graph","length","i","array","j","set_edge","src","dist","check_edge","get_string_form","string","forEach"],"version":3,"file":"template.0bb223de.js.map"}
{"mappings":"AEAA;;;;;;CAMC,EAED,MAAM;AACN,IAGM,EAHF,EAAO,AAAC,GAAU,CAAA,CAAE,KAAA,CAAK,CAAA,EDPzB,GCUE,EAAa,EAAE,CAwBZ,CAAE,SAtBM,AAAC,IACC,EAAK,GAEpB,EAAW,IAAX,AACF,EAkBmB,MAVP,KACV,IAAI,EAAS,GACb,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,MAAA,CAAQ,IAAK,CAC1C,KAAgB,AAAH,EAAO,CAAU,CAAjB,EAAoB,CAAC,MAAA,CAAQ,IACxC,GAAU,CAAU,CAAC,EAAE,CADZ,EACe,CAE5B,QAAQ,GAAA,CAAI,EACd,CACF,EAE0B,SAhBX,CAAC,EAAK,KACnB,IAAI,EAAU,CAAU,CAAC,EAAI,CACzB,EAAY,CAAU,CAAC,EAAK,CAAC,EAAE,CACnC,EAAQ,IAAA,CAAK,EACf,CAYmC,GDhCrC,IAAK,IAAI,EAAI,EAAG,GAAK,GAAI,IAAK,EAAK,QAAA,CAAS,GAE5C,EAAK,QAAA,CAAS,EAAG,GAEjB,EAAK,KAAA,EAEL,sCAAqC;AAErC,kCAAkC;AAElC,uBAAuB;AAEvB,sCAAsC;AAEtC;;;;CAIC,EAED,6EAA6E;AAE7E,mCAAmC;AACnC,6CAA6C;AAC7C,6CAA6C;AAE7C,wCAAwC;AACxC,0CAA0C;AAC1C,oCAAoC;AAEpC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AAEtC,wEAAwE;AACxE,8CAA8C;AAC9C,yCAAyC;AACzC,gDAAgD;AAChD,YAAY;AACZ,UAAU;AACV,QAAQ;AACR,MAAM;AACN,KAAK;AAEL,wBAAwB;AAExB,+BAA+B;AAC/B,+BAA+B;AAC/B,+BAA+B;AAC/B,+BAA+B;AAC/B,oBAAoB;A,8D","sources":["<anon>","src/index.js","src/graph_list.js"],"sourcesContent":["/**\n * create graph factory->\n * ->create build graph\n * ->create print to see graph is correct\n * ->create dfs modified for your specifications\n *\n */ //Node\nlet $aed6e35fa8b067b7$var$node = (data)=>({\n        data: data\n    });\nlet $aed6e35fa8b067b7$var$graph_list = ()=>{\n    let list_nodes = [];\n    let add_node = (value)=>{\n        let new_node = $aed6e35fa8b067b7$var$node(value);\n        let path_array = [\n            new_node\n        ];\n        list_nodes.push;\n    };\n    let add_edge = (src, dist)=>{\n        let current = list_nodes[src];\n        let dist_node = list_nodes[dist][0];\n        current.push(dist_node);\n    };\n    let print = ()=>{\n        let string = \"\";\n        for(let i = 0; i < list_nodes.length; i++){\n            for(let j = 0; j < list_nodes[j].length; i++)string += list_nodes[i][j];\n            console.log(string);\n        }\n    };\n    return {\n        add_node: add_node,\n        print: print,\n        add_edge: add_edge\n    };\n};\nvar $aed6e35fa8b067b7$export$2e2bcd8739ae039 = $aed6e35fa8b067b7$var$graph_list;\n\n\nlet $35da740d59af89ba$var$list = (0, $aed6e35fa8b067b7$export$2e2bcd8739ae039)();\nfor(let i = 1; i <= 64; i++)$35da740d59af89ba$var$list.add_node(i);\n$35da740d59af89ba$var$list.add_edge(4, 6);\n$35da740d59af89ba$var$list.print(); //import graph_matrix from \"./graph\";\n // let new_graph = graph_matrix();\n // createKnightGraph();\n // console.log(new_graph.BFS(36, 26));\n /**\n * look build a list graph\n * then build the previous kind of graph with 1 to 64 with edge too\n * then find a way to navigate from source to dist\n */  // let new_graph = graph_matrix(8, [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]);\n // let createKnightGraph = (n) => {\n //   const dx = [2, 1, -1, -2, -2, -1, 1, 2];\n //   const dy = [1, 2, 2, 1, -1, -2, -2, -1];\n //   for (let row = 0; row < n; row++) {\n //     for (let col = 0; col < n; col++) {\n //       let vertix = row * n + col;\n //       for (let i = 0; i < 8; i++) {\n //         const newRow = row + dx[i];\n //         const newCol = col + dy[i];\n //         if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n) {\n //           let target = newRow * n + newCol;\n //           console.log(vertix, target);\n //           new_graph.set_edge(vertix, target);\n //         }\n //       }\n //     }\n //   }\n // };\n // createKnightGraph(8);\n // // new_graph.set_edge(5, 5);\n // // new_graph.set_edge(5, 6);\n // // new_graph.set_edge(6, 7);\n // new_graph.get_string_form();\n // new_graph.DFS(5);\n\n\n//# sourceMappingURL=template.be043eca.js.map\n","import graph_list from \"./graph_list\";\n\nlet list = graph_list();\n\nfor (let i = 1; i <= 64; i++) list.add_node(i);\n\nlist.add_edge(4, 6);\n\nlist.print();\n\n//import graph_matrix from \"./graph\";\n\n// let new_graph = graph_matrix();\n\n// createKnightGraph();\n\n// console.log(new_graph.BFS(36, 26));\n\n/**\n * look build a list graph\n * then build the previous kind of graph with 1 to 64 with edge too\n * then find a way to navigate from source to dist\n */\n\n// let new_graph = graph_matrix(8, [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]);\n\n// let createKnightGraph = (n) => {\n//   const dx = [2, 1, -1, -2, -2, -1, 1, 2];\n//   const dy = [1, 2, 2, 1, -1, -2, -2, -1];\n\n//   for (let row = 0; row < n; row++) {\n//     for (let col = 0; col < n; col++) {\n//       let vertix = row * n + col;\n\n//       for (let i = 0; i < 8; i++) {\n//         const newRow = row + dx[i];\n//         const newCol = col + dy[i];\n\n//         if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n) {\n//           let target = newRow * n + newCol;\n//           console.log(vertix, target);\n//           new_graph.set_edge(vertix, target);\n//         }\n//       }\n//     }\n//   }\n// };\n\n// createKnightGraph(8);\n\n// // new_graph.set_edge(5, 5);\n// // new_graph.set_edge(5, 6);\n// // new_graph.set_edge(6, 7);\n// new_graph.get_string_form();\n// new_graph.DFS(5);\n","/**\n * create graph factory->\n * ->create build graph\n * ->create print to see graph is correct\n * ->create dfs modified for your specifications\n *\n */\n\n//Node\nlet node = (data) => ({ data });\n\nlet graph_list = () => {\n  let list_nodes = [];\n\n  let add_node = (value) => {\n    let new_node = node(value);\n    let path_array = [new_node];\n    list_nodes.push;\n  };\n\n  let add_edge = (src, dist) => {\n    let current = list_nodes[src];\n    let dist_node = list_nodes[dist][0];\n    current.push(dist_node);\n  };\n\n  let print = () => {\n    let string = \"\";\n    for (let i = 0; i < list_nodes.length; i++) {\n      for (let j = 0; j < list_nodes[j].length; i++) {\n        string += list_nodes[i][j];\n      }\n      console.log(string);\n    }\n  };\n\n  return { add_node, print, add_edge };\n};\n\nexport default graph_list;\n"],"names":["list_nodes","$aed6e35fa8b067b7$var$node","data","$35da740d59af89ba$var$list","add_node","value","push","print","string","i","length","j","console","log","add_edge","src","dist","current","dist_node"],"version":3,"file":"template.be043eca.js.map"}
{"mappings":"AGAA;;;;CAIC,EACD,IDAM,ECAF,EAAO,AAAC,GAGH,CAAA,CAAE,MAAA,EAAO,KAFL,IAEU,CAAA,EA8FvB,IAAA,EA3FkB,KAChB,IAAI,EAAO,KAYP,EAAkB,CAAC,EAAU,IAC/B,AAAI,AAAa,MAAb,EACK,GAGT,EAAU,IAAA,CAAO,EAAgB,EAAU,EAAU,IAArD,EAEO,GASL,EAAa,CAAC,EAAQ,IACxB,AAAI,AAAQ,MAAR,EACK,GAGT,EAAO,IAAA,CAAK,EAAK,KAAjB,EAEO,EAAW,EAAQ,EAAK,IAA/B,GAGE,EAAc,AAAC,GACjB,AAAI,AAAQ,MAAR,EAAqB,QAElB,EAAmB,EAAM,GAG9B,EAAqB,CAAC,EAAM,IAC9B,AAAY,MAAR,IAEA,EAAK,KAAA,EAAS,GAEX,EAAmB,EAAK,IAAA,CAAM,IAkBnC,EAAqB,CAAC,EAAM,IAC9B,AAAI,AAAQ,MAAR,EAAqB,KAErB,EAAK,KAAA,EAAS,EACT,EAAK,IADd,EAIA,EAAK,IAAA,CAAO,EAAmB,EAAK,IAAA,CAAM,GAEnC,GAKT,MAAO,CACL,SAhFa,AAAC,IACd,IAAI,EAAW,EAAK,GAGlB,EADE,AAAQ,MAAR,EACK,EAEA,EAAgB,EAAU,EAErC,EAyEE,UA7Dc,IAGP,EAFM,EAAE,CAEW,GA2D1B,YAhCgB,AAAC,GACjB,AAAI,AAAQ,MAAR,EAAqB,QAErB,AAAsB,CAAA,GAAtB,EAAY,GAAwB,iBAGtC,EADE,AAAa,MAAb,EAAK,IAAA,CACA,KAIF,EAAmB,EAAM,GAEzB,WAqBP,YAAA,EACA,eAPmB,IAAM,EAAK,KAAhC,AAQA,CACF,EFlGA,IAAI,GCGE,EAAoB,EAAE,CAiCnB,CAAE,SA5BM,AAAC,IACd,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAA,CAAQ,IAAK,CACrC,IAAI,EAAkB,AAAA,IAEtB,EAAgB,QAAA,CAAS,CAAK,CAAC,EAAE,EAEjC,EAAkB,IAAA,CAAK,EACzB,CACF,EAoBmB,SAlBJ,CAAC,EAAK,KACnB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAkB,MAAA,CAAQ,IAAK,CACjD,IAAI,EAAO,CAAiB,CAAC,EAAE,CAC3B,EAAK,cAAA,IAAoB,GAC3B,EAAK,QAAA,CAAS,EAElB,CACF,EAW6B,YATX,KAChB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAkB,MAAA,CAAQ,IAI5C,QAAQ,GAAA,CAFS,AADN,CAAiB,CAAC,EAAE,CACT,SAAtB,GAIJ,CAEyC,GDlCvC,EAAQ,EAAE,CAEd,IAAK,IAAI,EAAI,EAAG,GAAK,GAAI,IACvB,EAAM,IAAA,CAAK,GAGb,EAAK,QAAA,CAAS,GAgCd,EAAK,WAAL,E,+D","sources":["<anon>","src/index.js","src/graph.js","src/linked_list.js"],"sourcesContent":["/**\n *\n * @param {any} value\n * @returns {{value:any,next:Function,print:Function}}\n */ let $fda1debb3a020273$var$node = (value)=>{\n    let next = null;\n    return {\n        value: value,\n        next: next\n    };\n};\nlet $fda1debb3a020273$var$linked_list = ()=>{\n    let head = null;\n    let add_node = (value)=>{\n        let new_node = $fda1debb3a020273$var$node(value);\n        if (head == null) head = new_node;\n        else head = add_node_helper(new_node, head);\n    };\n    let add_node_helper = (new_node, temp_node)=>{\n        if (temp_node == null) return new_node;\n        temp_node.next = add_node_helper(new_node, temp_node.next);\n        return temp_node;\n    };\n    let get_array = ()=>{\n        let output = [];\n        return get_helper(output, head);\n    };\n    let get_helper = (output, temp)=>{\n        if (temp == null) return output;\n        output.push(temp.value);\n        return get_helper(output, temp.next);\n    };\n    let search_node = (value)=>{\n        if (head == null) return \"empty\";\n        return search_node_helper(head, value);\n    };\n    let search_node_helper = (temp, value)=>{\n        if (temp == null) return false;\n        if (temp.value == value) return true;\n        return search_node_helper(temp.next, value);\n    };\n    let remove_node = (value)=>{\n        if (head == null) return \"empty\";\n        if (search_node(value) == false) return \"no such value\";\n        if (head.next == null) {\n            head = null;\n            return \"removed\";\n        }\n        head = remove_node_helper(head, value);\n        return \"removed\";\n    };\n    let remove_node_helper = (temp, value)=>{\n        if (temp == null) return null;\n        if (temp.value == value) return temp.next;\n        temp.next = remove_node_helper(temp.next, value);\n        return temp;\n    };\n    let get_head_value = ()=>head.value;\n    return {\n        add_node: add_node,\n        get_array: get_array,\n        remove_node: remove_node,\n        search_node: search_node,\n        get_head_value: get_head_value\n    };\n};\nvar $fda1debb3a020273$export$2e2bcd8739ae039 = $fda1debb3a020273$var$linked_list;\n\n\n\nlet $879a74e0f856fe0e$var$graph_list = ()=>{\n    //use list instead of matrix\n    let array_linked_list = [];\n    /**\n   *\n   * @param {Array<String>} array\n   */ let set_node = (array)=>{\n        for(let i = 0; i < array.length; i++){\n            let new_linked_list = (0, $fda1debb3a020273$export$2e2bcd8739ae039)();\n            new_linked_list.add_node(array[i]);\n            array_linked_list.push(new_linked_list);\n        }\n    };\n    let set_edge = (src, dist)=>{\n        for(let i = 0; i < array_linked_list.length; i++){\n            let list = array_linked_list[i];\n            if (list.get_head_value() == src) list.add_node(dist);\n        }\n    };\n    let print_graph = ()=>{\n        for(let i = 0; i < array_linked_list.length; i++){\n            let list = array_linked_list[i];\n            let list_array = list.get_array();\n            console.log(list_array);\n        }\n    };\n    return {\n        set_node: set_node,\n        set_edge: set_edge,\n        print_graph: print_graph\n    };\n};\nvar $879a74e0f856fe0e$export$2e2bcd8739ae039 = $879a74e0f856fe0e$var$graph_list;\n\n\nlet $35da740d59af89ba$var$newg = (0, $879a74e0f856fe0e$export$2e2bcd8739ae039)();\nlet $35da740d59af89ba$var$board = [];\nfor(let i = 1; i <= 64; i++)$35da740d59af89ba$var$board.push(i);\n$35da740d59af89ba$var$newg.set_node($35da740d59af89ba$var$board);\nfunction $35da740d59af89ba$var$createKnightGraph() {\n    // Define possible knight movements\n    const movements = [\n        [\n            -2,\n            1\n        ],\n        [\n            -2,\n            -1\n        ],\n        [\n            2,\n            1\n        ],\n        [\n            2,\n            -1\n        ],\n        [\n            -1,\n            2\n        ],\n        [\n            -1,\n            -2\n        ],\n        [\n            1,\n            2\n        ],\n        [\n            1,\n            -2\n        ]\n    ];\n    // Create edges for each node using knight movements\n    for(let node = 1; node <= 64; node++){\n        const row = Math.floor((node - 1) / 8); // Calculate row index\n        const col = (node - 1) % 8; // Calculate column index\n        for (const [dx, dy] of movements){\n            const newRow = row + dx;\n            const newCol = col + dy;\n            if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n                const dest = newRow * 8 + newCol + 1;\n                $35da740d59af89ba$var$newg.set_edge(node, dest);\n            }\n        }\n    }\n}\n$35da740d59af89ba$var$newg.print_graph();\n\n\n//# sourceMappingURL=template.ee4471ff.js.map\n","import graph_matrix from \"./graph\";\n\nlet newg = graph_matrix();\n\nlet board = [];\n\nfor (let i = 1; i <= 64; i++) {\n  board.push(i);\n}\n\nnewg.set_node(board);\n\nfunction createKnightGraph() {\n  // Define possible knight movements\n  const movements = [\n    [-2, 1],\n    [-2, -1],\n    [2, 1],\n    [2, -1],\n    [-1, 2],\n    [-1, -2],\n    [1, 2],\n    [1, -2],\n  ];\n\n  // Create edges for each node using knight movements\n  for (let node = 1; node <= 64; node++) {\n    const row = Math.floor((node - 1) / 8); // Calculate row index\n    const col = (node - 1) % 8; // Calculate column index\n\n    for (const [dx, dy] of movements) {\n      const newRow = row + dx;\n      const newCol = col + dy;\n\n      if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n        const dest = newRow * 8 + newCol + 1;\n        newg.set_edge(node, dest);\n      }\n    }\n  }\n}\n\nnewg.print_graph();\n","import linked_list from \"./linked_list\";\nimport \"./style.css\";\n\nlet graph_list = () => {\n  //use list instead of matrix\n  let array_linked_list = [];\n  /**\n   *\n   * @param {Array<String>} array\n   */\n  let set_node = (array) => {\n    for (let i = 0; i < array.length; i++) {\n      let new_linked_list = linked_list();\n\n      new_linked_list.add_node(array[i]);\n\n      array_linked_list.push(new_linked_list);\n    }\n  };\n\n  let set_edge = (src, dist) => {\n    for (let i = 0; i < array_linked_list.length; i++) {\n      let list = array_linked_list[i];\n      if (list.get_head_value() == src) {\n        list.add_node(dist);\n      }\n    }\n  };\n\n  let print_graph = () => {\n    for (let i = 0; i < array_linked_list.length; i++) {\n      let list = array_linked_list[i];\n      let list_array = list.get_array();\n\n      console.log(list_array);\n    }\n  };\n\n  return { set_node, set_edge, print_graph };\n};\n\nexport default graph_list;\n","/**\n *\n * @param {any} value\n * @returns {{value:any,next:Function,print:Function}}\n */\nlet node = (value) => {\n  let next = null;\n\n  return { value, next };\n};\n\nlet linked_list = () => {\n  let head = null;\n\n  let add_node = (value) => {\n    let new_node = node(value);\n\n    if (head == null) {\n      head = new_node;\n    } else {\n      head = add_node_helper(new_node, head);\n    }\n  };\n\n  let add_node_helper = (new_node, temp_node) => {\n    if (temp_node == null) {\n      return new_node;\n    }\n\n    temp_node.next = add_node_helper(new_node, temp_node.next);\n\n    return temp_node;\n  };\n\n  let get_array = () => {\n    let output = [];\n\n    return get_helper(output, head);\n  };\n\n  let get_helper = (output, temp) => {\n    if (temp == null) {\n      return output;\n    }\n\n    output.push(temp.value);\n\n    return get_helper(output, temp.next);\n  };\n\n  let search_node = (value) => {\n    if (head == null) return \"empty\";\n\n    return search_node_helper(head, value);\n  };\n\n  let search_node_helper = (temp, value) => {\n    if (temp == null) return false;\n\n    if (temp.value == value) return true;\n\n    return search_node_helper(temp.next, value);\n  };\n\n  let remove_node = (value) => {\n    if (head == null) return \"empty\";\n\n    if (search_node(value) == false) return \"no such value\";\n\n    if (head.next == null) {\n      head = null;\n      return \"removed\";\n    }\n\n    head = remove_node_helper(head, value);\n\n    return \"removed\";\n  };\n\n  let remove_node_helper = (temp, value) => {\n    if (temp == null) return null;\n\n    if (temp.value == value) {\n      return temp.next;\n    }\n\n    temp.next = remove_node_helper(temp.next, value);\n\n    return temp;\n  };\n\n  let get_head_value = () => head.value;\n\n  return {\n    add_node,\n    get_array,\n    remove_node,\n    search_node,\n    get_head_value,\n  };\n};\n\nexport default linked_list;\n"],"names":["array_linked_list","$fda1debb3a020273$var$node","value","next","$fda1debb3a020273$export$2e2bcd8739ae039","head","add_node_helper","new_node","temp_node","get_helper","output","temp","push","search_node","search_node_helper","remove_node_helper","add_node","get_array","remove_node","get_head_value","$35da740d59af89ba$var$newg","set_node","array","i","length","new_linked_list","set_edge","src","dist","list","print_graph","console","log","$35da740d59af89ba$var$board"],"version":3,"file":"template.ee4471ff.js.map"}
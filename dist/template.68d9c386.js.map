{"mappings":"IEU0B,EAV1B,IAWM,EAEA,EAoBA,EA+BA,EAhEF,EAAO,AAAC,GACH,CAAA,CAAE,KAAA,CAAK,CAAA,EDOZ,GCEsB,EDFM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,CCGlD,EAAS,EAAE,CAEX,EAAQ,EAAE,CAoBV,EAAW,AAAC,GAAU,EAAM,IAAA,CAAK,EAAK,IA+BtC,EAAa,CAAC,EAAS,KACzB,IAAI,EAAQ,GAAA,CAAI,IAGd,EAAQ,GAAA,CAAI,GACZ,QAAQ,GAAA,CAAI,GAGd,IAAK,IAAI,EAAI,EAAG,EAAI,CAAM,CAAC,EAAO,CAAC,MAAA,CAAQ,IAChB,GAArB,CAAM,CAAC,EAAO,CAAC,EAAE,EACnB,EAAW,EAAS,GAG1B,EAEA,AAhEmB,CAAA,KACjB,GAAI,ADRqB,GCQrB,EAAY,MAAA,CAGhB,IAAK,IAAI,EAAI,EAAG,GDXS,ECWE,IAAK,CAC9B,EAAS,CAAW,CAAC,EAAI,EAAE,EAC3B,IAAI,EAAQ,EAAE,CAEd,IAAK,IAAI,EAAI,EAAG,GDfO,ECeI,IAAK,EAAM,IAAA,CAAK,GAE3C,EAAO,IAAA,CAAK,EACd,CACF,CAAA,IAsDO,CAAE,SAAA,EAAU,SAlDJ,CAAC,EAAK,IAAU,CAAM,CAAC,EAAI,CAAC,EAAK,CAAG,EAkDtB,WApDZ,CAAC,EAAK,IAAU,AAAqB,GAArB,CAAM,CAAC,EAAI,CAAC,EAAK,CAoDT,gBA9CnB,KACpB,IAAI,EAAS,KAEb,EAAM,OAAA,CAAQ,AAAC,GAAW,GAAU,EAAM,IAAA,CAAO,KAEjD,QAAQ,GAAA,CAAI,GAEZ,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAA,CAAQ,IAAK,CACtC,EAAS,CAAC,EAAE,CAAK,CAAC,EAAE,CAAC,IAAA,CAAK,CAAC,CAAC,CAE5B,IAAK,IAAI,EAAI,EAAG,EAAI,CAAM,CAAC,EAAE,CAAC,MAAA,CAAQ,IACpC,GAAU,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,IAE3B,QAAQ,GAAA,CAAI,EACd,CACF,EA+B0D,IA7BhD,AAAC,GAGF,EAFO,IAAI,IAES,EA0BiC,GD1ChE,wBAAwB;AACxB,EAAU,QAAA,CAAS,EAAG,GACtB,EAAU,eAAV,GACA,EAAU,GAAA,CAAI,E,+D","sources":["<anon>","src/index.js","src/graph.js"],"sourcesContent":["let $879a74e0f856fe0e$var$node = (data)=>{\n    return {\n        data: data\n    };\n};\n//graph implemented in matrix form\n/**\n *\n * @param {Number} size\n * @param {Array} nodes_array\n */ let $879a74e0f856fe0e$var$graph_matrix = (size, nodes_array)=>{\n    let matrix = [];\n    let nodes = [];\n    let create_graph = ()=>{\n        if (nodes_array.length != size) return \"size and length of nodes is not the same\";\n        for(let i = 1; i <= size; i++){\n            add_node(nodes_array[i - 1]);\n            let array = [];\n            for(let j = 1; j <= size; j++)array.push(0);\n            matrix.push(array);\n        }\n    };\n    let check_edge = (src, dist)=>matrix[src][dist] == 1 ? true : false;\n    let set_edge = (src, dist)=>matrix[src][dist] = 1;\n    let add_node = (value)=>nodes.push($879a74e0f856fe0e$var$node(value));\n    let get_string_form = ()=>{\n        let string = \"  \";\n        nodes.forEach((value)=>string += value.data + \" \");\n        console.log(string);\n        for(let i = 0; i < matrix.length; i++){\n            string = `${nodes[i].data} `;\n            for(let j = 0; j < matrix[i].length; j++)string += matrix[i][j] + \" \";\n            console.log(string);\n        }\n    };\n    let DFS = (src)=>{\n        let visited = new Set();\n        return DFS_helper(visited, src);\n    };\n    /**\n   *\n   * @param {Set} visited\n   * @param {Number} source\n   */ let DFS_helper = (visited, source)=>{\n        if (visited.has(source)) return;\n        else {\n            visited.add(source);\n            console.log(source);\n        }\n        for(let i = 0; i < matrix[source].length; i++)if (matrix[source][i] == 1) DFS_helper(visited, i);\n    };\n    create_graph();\n    return {\n        add_node: add_node,\n        set_edge: set_edge,\n        check_edge: check_edge,\n        get_string_form: get_string_form,\n        DFS: DFS\n    };\n};\nvar $879a74e0f856fe0e$export$2e2bcd8739ae039 = $879a74e0f856fe0e$var$graph_matrix;\n\n\n// let new_graph = graph_matrix();\n// createKnightGraph();\n// console.log(new_graph.BFS(36, 26));\nlet $35da740d59af89ba$var$new_graph = (0, $879a74e0f856fe0e$export$2e2bcd8739ae039)(8, [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7\n]);\nlet $35da740d59af89ba$var$createKnightGraph = (n)=>{\n    const moves = [\n        [\n            2,\n            1\n        ],\n        [\n            2,\n            -1\n        ],\n        [\n            -2,\n            1\n        ],\n        [\n            -2,\n            -1\n        ],\n        [\n            1,\n            2\n        ],\n        [\n            1,\n            -2\n        ],\n        [\n            -1,\n            2\n        ],\n        [\n            -1,\n            -2\n        ]\n    ];\n    for(let row = 0; row < n; row++){\n        for(let col = 0; col < n; col++)// const node = [row, col];\n        for (const move of moves){\n            const [dr, dc] = move;\n            const newRow = row + dr;\n            const newCol = col + dc;\n            if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n) $35da740d59af89ba$var$new_graph.set_edge(newRow, newCol);\n        }\n    }\n};\n// createKnightGraph(8);\n$35da740d59af89ba$var$new_graph.set_edge(5, 5);\n$35da740d59af89ba$var$new_graph.get_string_form();\n$35da740d59af89ba$var$new_graph.DFS(5);\n\n\n//# sourceMappingURL=template.68d9c386.js.map\n","import graph_matrix from \"./graph\";\n\n// let new_graph = graph_matrix();\n\n// createKnightGraph();\n\n// console.log(new_graph.BFS(36, 26));\n\nlet new_graph = graph_matrix(8, [0, 1, 2, 3, 4, 5, 6, 7]);\n\nlet createKnightGraph = (n) => {\n  const moves = [\n    [2, 1],\n    [2, -1],\n    [-2, 1],\n    [-2, -1],\n    [1, 2],\n    [1, -2],\n    [-1, 2],\n    [-1, -2],\n  ];\n\n  for (let row = 0; row < n; row++) {\n    for (let col = 0; col < n; col++) {\n      // const node = [row, col];\n\n      for (const move of moves) {\n        const [dr, dc] = move;\n        const newRow = row + dr;\n        const newCol = col + dc;\n\n        if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n) {\n          new_graph.set_edge(newRow, newCol);\n        }\n      }\n    }\n  }\n};\n\n// createKnightGraph(8);\nnew_graph.set_edge(5, 5);\nnew_graph.get_string_form();\nnew_graph.DFS(5);\n","let node = (data) => {\n  return { data };\n};\n\n//graph implemented in matrix form\n/**\n *\n * @param {Number} size\n * @param {Array} nodes_array\n */\nlet graph_matrix = (size, nodes_array) => {\n  let matrix = [];\n\n  let nodes = [];\n\n  let create_graph = () => {\n    if (nodes_array.length != size)\n      return \"size and length of nodes is not the same\";\n\n    for (let i = 1; i <= size; i++) {\n      add_node(nodes_array[i - 1]);\n      let array = [];\n\n      for (let j = 1; j <= size; j++) array.push(0);\n\n      matrix.push(array);\n    }\n  };\n\n  let check_edge = (src, dist) => (matrix[src][dist] == 1 ? true : false);\n\n  let set_edge = (src, dist) => (matrix[src][dist] = 1);\n\n  let add_node = (value) => nodes.push(node(value));\n\n  let get_string_form = () => {\n    let string = \"  \";\n\n    nodes.forEach((value) => (string += value.data + \" \"));\n\n    console.log(string);\n\n    for (let i = 0; i < matrix.length; i++) {\n      string = `${nodes[i].data} `;\n\n      for (let j = 0; j < matrix[i].length; j++) {\n        string += matrix[i][j] + \" \";\n      }\n      console.log(string);\n    }\n  };\n\n  let DFS = (src) => {\n    let visited = new Set();\n\n    return DFS_helper(visited, src);\n  };\n\n  /**\n   *\n   * @param {Set} visited\n   * @param {Number} source\n   */\n\n  let DFS_helper = (visited, source) => {\n    if (visited.has(source)) {\n      return;\n    } else {\n      visited.add(source);\n      console.log(source);\n    }\n\n    for (let i = 0; i < matrix[source].length; i++) {\n      if (matrix[source][i] == 1) {\n        DFS_helper(visited, i);\n      }\n    }\n  };\n\n  create_graph();\n\n  return { add_node, set_edge, check_edge, get_string_form, DFS };\n};\n\nexport default graph_matrix;\n"],"names":["nodes_array","matrix","nodes","add_node","DFS_helper","$879a74e0f856fe0e$var$node","data","$35da740d59af89ba$var$new_graph","value","push","visited","source","has","add","console","log","i","length","create_graph","array","j","set_edge","src","dist","check_edge","get_string_form","string","forEach","DFS","Set"],"version":3,"file":"template.68d9c386.js.map"}